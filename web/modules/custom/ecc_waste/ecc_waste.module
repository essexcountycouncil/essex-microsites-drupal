<?php

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\TempStore\SharedTempStoreFactory;

/**
 * @file
 * Primary module hooks for ECC Waste module.
 */

 /**
  * Implements hook_views_post_render()
  *
  * Adds custom styles to the view.
  */
function ecc_waste_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  if ($view->id() == 'disposal_options') {
    $output['#attached']['library'][] = 'ecc_waste/ecc_waste';
    $output['#attached']['library'][] = 'love_essex/waste-search';
  }
}


/**
 * Implements template_preprocess_node()
 *
 * Do not print a map if there's no location to show.
 * Print external url if there is one.
 *
 * @param  [array] $variables
 * @return void
 */
function ecc_waste_preprocess_node (&$variables) {
  if ($variables['node']->getType() === 'waste_disposal_option') {
    if ($variables['view_mode'] === 'full') {
      $location = $variables['node']->get('field_disposal_option_location')->value;
      if (empty($location)) {
        unset($variables['content']['field_disposal_option_location']);
      }
    }

    $display_title = $variables['node']->get('field_disposal_display_title')->getValue();
    $url = $variables['node']->get('field_disposal_option_url')->uri;
    if (!empty($url)) {
      $variables['url'] = $url;
      unset($variables['content']['field_disposal_option_url']);
    }
    // If we have a display title, show it instead of a node title.
    if (!empty($display_title)) {
      $variables['title_attributes']['class'][] = 'visually-hidden';
      $variables['content']['field_disposal_display_title']['#prefix'] = '<h3><a href="' . $variables['url'] . '">';
      $variables['content']['field_disposal_display_title']['#suffix'] = '</a></h3>';
    }



    // Calculate distance from our postcode location.
    $session = \Drupal::service('session');
    /** @var SharedTempStoreFactory $shared_tempstore */
    $shared_tempstore = \Drupal::service('tempstore.shared');
    $store = $shared_tempstore->get('ecc_waste');
    $postcode_location_data = $store->get('ecc_waste_location_' . $session->getID());

    if (!empty($postcode_location_data) && !empty($variables['node']->get('field_disposal_option_location')->getValue())) {
      $node_location = $variables['node']->get('field_disposal_option_location')->getValue();
      $distance = ecc_waste_calculate_distance($postcode_location_data['lat'], $postcode_location_data['lon'], $node_location[0]['lat'], $node_location[0]['lon'], $unit = 'miles');
      $distance_markup = '';
      $distance = (int)ceil($distance);
      if ($distance > 1) {
        $distance_markup = '<div>About ' . $distance . ' miles away</div>';
      }
      elseif ($distance === 1) {
        $distance_markup = '<div>About ' . $distance . ' mile away</div>';
      }

      $variables['content']['distance']['#markup'] = $distance_markup;
      $variables['#cache']['contexts'][] = 'session';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ecc_waste_form_node_waste_disposal_option_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $form['#attached']['library'][] = 'ecc_waste/ecc_waste_edit';
  $form['field_disposal_option_items']['checkbox_search'] = [
    '#type' => 'textfield',
    '#title' => t('Filter waste items'),
    '#weight' => 0,
    '#placeholder' => t('Start typing'),
  ];
  $form['field_disposal_option_items']['widget']['#weight'] = 1;
}


/**
 * Implements hook_views_data_alter().
 */
function ecc_waste_views_data_alter(array &$data) {
  // Modify $data to include the necessary filter.
  $data['views']['postcode_search_custom_filter'] = [
    'title' =>  t('Essex Postcode'),
    'filter' => [
      'title' => t('Essex Postcode'),
      'field' => 'id',
      'id' => 'postcode_filter',
    ],
  ];
}

/**
 * Implements hook_views_prerender()
 *
 * Limit the number of results per waste disposal option.
 *
 * @param  ViewExecutable $view
 * @return void
 */
function ecc_waste_views_pre_render(ViewExecutable $view) {

  if ($view->id() == 'disposal_options') {
    $session = \Drupal::service('session');
    /** @var SharedTempStoreFactory $shared_tempstore */
    $shared_tempstore = \Drupal::service('tempstore.shared');
    $store = $shared_tempstore->get('ecc_waste');
    $postcode_location_data = $store->get('ecc_waste_location_' . $session->getID());

    // Find a count of results per rating, then limit them.
    $ratings_sort = [];
    foreach ($view->result as $row) {
      $ratings_sort[] = [$row->taxonomy_term_field_data_taxonomy_term__field_service_enviro => $row];
    }

    $nids = [];
    $ratings = [];
    // Remove duplicates first off.
    foreach ($view->result as $index => $row) {
      if (array_search($row->nid, $nids) === FALSE) {
        $nids[] = $row->nid;
      }
      else {
        unset($view->result[$index]);
      }
    }

    // Count values per rating.
    foreach ($view->result as $index => $row) {
      $ratings[] = $row->taxonomy_term_field_data_taxonomy_term__field_service_enviro;
    }
    $counted_values = array_count_values($ratings);
    foreach ($counted_values as $rating => $count) {
      if ($count > 3) {
        $working_row_data = [];
        foreach ($view->result as $index => $row) {
          if ($row->taxonomy_term_field_data_taxonomy_term__field_service_enviro == $rating) {
            // Calculate distance from our postcode location.
            if (!empty($postcode_location_data) && !empty($row->_entity->get('field_disposal_option_location')->getValue())) {
              $node_location = $row->_entity->get('field_disposal_option_location')->getValue();
              $distance = ecc_waste_calculate_distance($postcode_location_data['lat'], $postcode_location_data['lon'], $node_location[0]['lat'], $node_location[0]['lon'], $unit = 'miles');
              // Store index and proximity in an array.
              $working_row_data[] = [
                'index' => $index,
                'distance' => ceil($distance),
                'data' => $row,
              ];
            }
            else {
              $working_row_data[] = [
                'index' => $index,
                'distance' => 0,
                'data' => $row,
              ];
            }
          }
        }
        // Sort by proximity.
        $unsorted_row_data = $working_row_data;
        usort($working_row_data, 'ecc_waste_sort_by_distance');
        $sorted_row_data = $working_row_data;
        // Iterate through swapping our results into place,
        // and unsetting all after 3.
        foreach ($sorted_row_data as $j => $item) {
          $view->result[$unsorted_row_data[$j]['index']] = $item['data'];
          if ($j > 2) {
            unset($view->result[$unsorted_row_data[$j]['index']]);
          }
        }
        // Add a 'see all X type' link and a display for those.
      }
    }
  }

  if ($view->id() == 'lgms_group_taxonomy_terms') {
    if ($view->current_display == 'page' && !empty($view->args[1]) && $view->args[1] == 'environmental_rating') {
      $button_markup = '<a href="order-environmental-ratings" class="button button--primary">Order Environmental Ratings</a>';
      $view->header['area_text_custom']->options['content'] = $button_markup;
    }
    if ($view->current_display == 'page' && !empty($view->args[1]) && $view->args[1] == 'waste_item') {
      $button_markup = '<a href="order-waste-items" class="button button--primary">Order Waste Items</a>';
      $view->header['area_text_custom']->options['content'] = $button_markup;
    }
  }
}

/**
 * Helper distance sort function.
 *
 * @param  [int] $a
 * @param  [int] $b
 * @return [int]
 */
function ecc_waste_sort_by_distance($a, $b) {
    return $a['distance'] - $b['distance'];
}


/**
 * Helper function to calculate the distance between two coordinates.
 *
 * @param  [float] $lat1
 * @param  [float] $lon1
 * @param  [float] $lat2
 * @param  [float] $lon2
 * @param  string $unit
 * @return float $miles
 */
function ecc_waste_calculate_distance($lat1, $lon1, $lat2, $lon2, $unit = 'miles') {
    $theta = $lon1 - $lon2;
    $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
    $dist = acos($dist);
    $dist = rad2deg($dist);
    $miles = $dist * 60 * 1.1515;

    switch ($unit) {
        case 'km':
            // Convert miles to kilometers
            return ($miles * 1.609344);
        case 'miles':
            return $miles;
        default:
            return $miles;
    }
}


/**
 * Implements template_preprocess_taxonomy_term()
 */
function ecc_waste_preprocess_taxonomy_term(&$variables) {

  if ($variables['name']['#bundle'] == 'environmental_rating') {
    $variables['attributes']['class'][] = 'term-environmental-rating';
  }
}


/**
 * Implements hook_theme().
 *
 * Use a module-provided template.
 */
function ecc_waste_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__waste_search' => [
      'template' => 'paragraph--waste-search',
      'base hook' => 'paragraph',
      'path' => $path . '/templates',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * @param  array  $suggestions
 * @param  array  $variables
 * @param  [type] $hook
 * @return void
 */
function ecc_waste_theme_suggestions_alter(array &$suggestions, array &$variables, $hook) {
  if ($hook == 'paragraph') {
    $paragraph = $variables['elements']['#paragraph'];
    if (!empty($paragraph)) {
      if (!empty($paragraph->getType()) && $paragraph->getType() ==='waste_search') {
        $suggestions[] = $hook . '__' . 'waste_search';
      }
    }
  }
}
