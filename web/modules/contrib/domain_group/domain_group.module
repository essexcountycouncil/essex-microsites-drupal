<?php

/**
 * @file
 * Contains domain_group.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Render\Element;
use Drupal\domain\Entity\Domain;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\domain\DomainInterface;
use Drupal\domain_group\QueryAccess\EntityQueryAlter;
use Drupal\domain_group\QueryAccess\GroupQueryAlter;
use Drupal\domain_group\QueryAccess\GroupRelationshipQueryAlter;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupRelationshipInterface;

/**
 * Implements hook_help().
 */
function domain_group_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the vibrent_blocks module.
    case 'help.page.domain_group':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides integration between Domain and Group modules.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function domain_group_group_delete(EntityInterface $entity) {
  // Deleting domain created by the group.
  if ($domain = Domain::load('group_' . $entity->id())) {
    $domain->delete();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function domain_group_group_relationship_access(GroupRelationshipInterface $relation, $op, AccountInterface $account) {
  if (!\Drupal::config('domain_group.settings')->get('unique_group_access')) {
    return AccessResult::neutral();
  }

  $active_id = \Drupal::service('domain_group_resolver')->getActiveDomainGroupId();
  if (empty($active_id)) {
    return AccessResult::neutral();
  }

  if ($active_id != $relation->getGroup()->id()) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function domain_group_group_access(GroupInterface $group, $op, AccountInterface $account) {
  if (!\Drupal::config('domain_group.settings')->get('unique_group_access')) {
    return AccessResult::neutral();
  }

  $group_id = $group->id();
  // Not yet created.
  if (empty($group_id)) {
    return AccessResult::neutral();
  }

  $active_id = \Drupal::service('domain_group_resolver')->getActiveDomainGroupId();
  if (empty($active_id)) {
    return AccessResult::neutral();
  }

  if ($active_id == $group_id) {
    return AccessResult::neutral();
  }
  else {
    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_entity_access().
 */
function domain_group_entity_access(EntityInterface $entity, $op, AccountInterface $account) {
  if (!\Drupal::config('domain_group.settings')->get('unique_group_access')) {
    return AccessResult::neutral();
  }

  // Some modules, including the code in \Drupal\node\NodeForm::access() may
  // check for 'view', 'update' or 'delete' access on new entities, even though
  // that makes little sense. We need to account for it to avoid crashes because
  // we would otherwise query the DB with a non-existent node ID.
  if ($entity->isNew()) {
    return AccessResult::neutral();
  }
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  $active_id = \Drupal::service('domain_group_resolver')->getActiveDomainGroupId();
  if (empty($active_id)) {
    return AccessResult::neutral();
  }

  // Load all of the group content for this entity.
  $group_relationships = \Drupal::entityTypeManager()
    ->getStorage('group_relationship')
    ->loadByEntity($entity);

  if (empty($group_relationships)) {
    return AccessResult::neutral();
  }

  foreach ($group_relationships as $membership) {
    if ($membership->get('gid')->target_id == $active_id) {
      return AccessResult::neutral();
    }
  }
  return AccessResult::forbidden();
}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_group_query_entity_query_alter(SelectInterface $query) {
  $entity_type_id = $query->getMetaData('entity_type');
  if ($query->hasTag($entity_type_id . '_access')) {

    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);

    switch ($entity_type_id) {
      case 'group':
        $class_name = GroupQueryAlter::class;
        break;

      case 'group_relationship':
        $class_name = GroupRelationshipQueryAlter::class;
        break;

      default:
        $class_name = EntityQueryAlter::class;
    }

    \Drupal::classResolver($class_name)
      ->alter($query, $entity_type);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_group_query_views_entity_query_alter(SelectInterface $query) {
  $entity_type_id = $query->getMetaData('entity_type');
  $query->addTag($entity_type_id . '_access');
  domain_group_query_entity_query_alter($query);
}


/**
 * Implements hook_module_implements_alter().
 */
function domain_group_module_implements_alter(&$implementations, $hook) {
  // Ensure our hook_form_alter comes after domain_path_form_alter.
  if ($hook == 'form_alter') {
    $group = $implementations['domain_group'];
    unset($implementations['domain_group']);
    $implementations['domain_group'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function domain_group_form_alter(&$form, &$form_state, $form_id) {

  // Support for domain_path.
  $domain_path = NULL;
  if (isset($form['path']['widget'])
    && isset($form['path']['widget'][0])
    && isset($form['path']['widget'][0]['domain_path'])
  ) {
    $domain_path =& $form['path']['widget'][0]['domain_path'];
  }
  elseif (isset($form['domain_path'])) {
    $domain_path =& $form['domain_path'];
  }

  if ($domain_path
    && ($object = $form_state->getFormObject())
    && !empty($object) && is_callable([$object, 'getEntity'])
    && ($entity = $object->getEntity())
  ) {
    $domain_ids = Element::children($domain_path);
    $domain_ids_remove = array_flip($domain_ids); 
    unset($domain_ids_remove['domain_path_delete']);
    if (($active = \Drupal::service('domain.negotiator')->getActiveDomain())
      && assert($active instanceof DomainInterface)
    ) {
      // Always show the active domain, be it default, or microsite.
      unset($domain_ids_remove[$active->id()]);
      // On the default domain might show more, or all, domains.
      if ($active->isDefault()) {
        if ($domains = \Drupal::service('domain_group_resolver')->getEntityGroupDomains($entity)) {
          // On default domain with an entity has groups with domain.
          // Show all of these domain groups, and default domain.
          $domain_ids_remove = array_diff_key($domain_ids_remove, $domains);
        }
        elseif ($domain = \Drupal::service('domain_group_resolver')->getCurrentRouteGroupDomain()) {
          // On default domain, and a group route, probably a new entity form.
          unset($domain_ids_remove[$domain->id()]);
        }
        else {
          $domain_ids_remove = [];
        }
      }

      foreach ($domain_ids_remove as $domain_id => $index) {
        $domain_path[$domain_id]['#access'] = FALSE;
      }
    }
  }

}
