{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if paragraph.field_banner_theme.value %}
  {% set banner_theme = paragraph.field_banner_theme.value %}
{% endif %}

{%
  set classes = [
    'banner',
    'banner--primary',
    banner_theme ? 'banner--' ~ banner_theme|clean_class,
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{# When node-based banner content is used,
   the title is used as main page title, so we adjust the markup to suit. #}
{% set primary_banner_fields = ['lgms_banner', 'localgov_directory_banner', 'localgov_page_banner'] %}

{% if not localgov_base_remove_css %}
	{{ attach_library('localgov_base/banner') }}
{% endif %}

<div{{attributes.addClass(classes)}}>
  <div class="banner__inner">
    <div class="lgd-container padding-horizontal">
      <div class="banner__content">
        <div class="banner__content-inner flow flow--large">
          {% if paragraph.get('parent_field_name').value in primary_banner_fields %}
            <h1 class="full__title">{{ content.localgov_title[0]['#context']['value'] }}</h1>
            {{ content|without('localgov_title', 'localgov_image', 'localgov_url', 'localgov_logo', 'field_banner_cta') }}
          {% else %}
            {{ content|without('localgov_image', 'localgov_url', 'localgov_logo', 'field_banner_cta') }}
          {% endif %}
          {% if paragraph.field_banner_cta.value %}
            <div class="banner__cta">
              <a href="{{ content.field_banner_cta.0['#url'] }}">
                {{ content.field_banner_cta.0['#title']}}
              </a>
            </div>
          {% endif %}
        </div>
        {% if paragraph.localgov_image.value %}
          <div class="banner__image">
            {{ content.localgov_image }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>
