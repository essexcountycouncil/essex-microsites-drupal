.lgd-page-section {
  --page-section-regions-gap: 0;
  --page-section-margin-after: 0;
  margin-bottom: var(--page-section-margin-after);
}

.lgd-page-section .layout {
  gap: var(--page-section-regions-gap);
}

.lgd-page-section--regions-margin-small .layout {
  --page-section-regions-gap: var(--spacing-small);
}
.lgd-page-section--regions-margin-medium .layout {
  --page-section-regions-gap: var(--spacing);
}
.lgd-page-section--regions-margin-large .layout {
  --page-section-regions-gap: var(--spacing-large);
}
.lgd-page-section--regions-margin-larger .layout {
  --page-section-regions-gap: var(--spacing-larger);
}
.lgd-page-section--regions-margin-largest .layout {
  --page-section-regions-gap: var(--spacing-largest);
}

.lgd-page-section--margin-after-small {
  --page-section-margin-after: var(--spacing-small);
}
.lgd-page-section--margin-after-medium {
  --page-section-margin-after: var(--spacing);
}
.lgd-page-section--margin-after-large {
  --page-section-margin-after: var(--spacing-large);
}
.lgd-page-section--margin-after-larger {
  --page-section-margin-after: var(--spacing-larger);
}
.lgd-page-section--margin-after-largest {
  --page-section-margin-after: var(--spacing-largest);
}

/*
  This might win me a CSS Oscar, or get me fired!
  In an effot to be able to centre text properly, we need to add it to a
  3-column layout and put the text in the middle column. If we use a 1-column
  layout, the text will be centered, but since the max width of a text paragraph
  is 768px, it will be centered only within that amount of space and aligned to
  the left.
  What we are doing here is saying if we have a 3-column layout and the first
  and third columns are empty, then we can use the middle column to center the
  text.
*/
@media screen and (min-width: 768px) {
  .layout--threecol-33-34-33:not(:has(.layout__region--first *)):not(:has(.layout__region--third *)) {
    grid-template-columns: 25% 50% 25%;
  }
}